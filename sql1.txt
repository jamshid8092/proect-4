4.1.1
select city_name object_name, 'city' object_type
from city
union 
select state object_name, 'state' object_type
from city
union 
select first_name object_name, 'driver' object_type
from driver
union 
select make object_name, 'truck' object_type
from truck
order by object_name,object_type
4.2.1
select
d.zip_code::text object_name,
    d.first_name ,
    'zip' object_type
from
    shipping.driver d
union all
select
    d.phone::text object_name,
    d.first_name  ,
    'phone' object_type
from
    shipping.driver d
order by 1, 2;
4.3.1
select
'total_shippings' as date_period,
count(s.ship_id) as cnt_shipping
from
shipping.shipment as s
union all
select
s.ship_date::text as date_period,
count(s.ship_id) as cnt_shipping
from
shipping.shipment as s
group by
s.ship_date
order by 1 desc
4.4.1
select c.city_name, count(s.city_id) shippings_fake
from city c 
    join shipment s on c.city_id = s.city_id
group by 1 
having count(s.ship_id) > 10 
union all 
select c.city_name, count(s.city_id)+5 shippings_fake
from city c
    join shipment s on c.city_id = s.city_id
group by 1 
having count(s.ship_id) <= 10 
order by 2 desc, 1 asc
4.5.1
select 
c.column_name
from 
information_schema.columns c
where 
c.table_schema = 'shipping'
and c.table_name = 'shipment'
except 
select 
c.column_name
from 
information_schema.columns c
where 
c.table_schema = 'shipping'
and c.table_name = 'city'
except
select c.column_name
from information_schema.columns c
where c.table_schema = 'shipping' and c.table_name = 'customer'
except
select c.column_name
from information_schema.columns c
where c.table_schema = 'shipping' and c.table_name = 'driver'
except
select c.column_name
from information_schema.columns c
where c.table_schema = 'shipping' and c.table_name = 'truck'
order by 1
4.5.2
select  c.city_id
from shipping.customer c
intersect
select s.city_id
from shipping.shipment s
intersect
select d.city_id
from shipping.driver d

5.1.1
select distinct c.state
from shipping.city c
join shipping.shipment s on s.city_id = c.city_id
order by 1
5.1.2
select 
	distinct c.table_schema,
	c.table_name
from 
	 information_schema.columns c
where 
    not exists
        (
        select 
            *
        from 
            information_schema.table_constraints t 
        where 
            t.table_schema = c.table_schema and t.table_name = c.table_name and t.constraint_type = 'PRIMARY KEY'
        )
order by 1,2
5.1.3
select 
    c.city_name city,
    exists 
        (
        select 
            *
        from
            shipping.customer c1 
        where 
            c.city_id = c1.city_id
        ) has_customer, 
    exists 
        (
        select 
            *
        from 
            shipping.driver d 
        where 
            c.city_id = d.city_id
        ) has_driver, 
    exists 
        (
        select 
            *
        from 
            shipping.shipment s
        where 
            c.city_id = s.city_id
            ) has_shipment
from 
    shipping.city c  
order by 1
5.2.1
select *
from shipping.shipment ss
where ss.driver_id in
(
select ss.driver_id
from shipping.shipment ss
group by ss.driver_id
having count(ss.ship_id)>90)
order by 1,2
5.3.1
select *
from
(select d.first_name,c.cust_name,count(s.ship_id)
from shipping.shipment s
join shipping.driver d on d.driver_id=s.driver_id
join shipping.customer c on s.cust_id=c.cust_id
group  by first_name,cust_name
   
)a
group by first_name,cust_name,count
order by 3 desc limit 1
5.3.2
select *
from
(select d.first_name,c.cust_name,count(s.ship_id)
from shipping.shipment s
join shipping.driver d on d.driver_id=s.driver_id
join shipping.customer c on s.cust_id=c.cust_id
group  by first_name,cust_name
   
)a
group by first_name,cust_name,count
order by 3 desc limit 1
5.3.3
не мог сделать
5.3.4
не мог сделать
5.4.1
не мог сделать

датасет

select f.flight_id, f.departure_airport,f.arrival_airport,a.model
,date_part('hour',f.actual_arrival - f.actual_departure)*60+
date_part('minute',f.actual_arrival - f.actual_departure) flight_time
from dst_project.aircrafts a
join dst_project.flights f on a.aircraft_code=f.aircraft_code
join dst_project.seats s on a.aircraft_code=s.aircraft_code
where departure_airport='AAQ'
and (date_trunc('month',scheduled_departure) in ('2017-01-01','2017-02-01','2017-12-01'))
and status not in ('Cancelled')


